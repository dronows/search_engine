#pragma once

#include <sstream>
#include <vector>
#include <map>
#include <thread>
#include <mutex>

struct Entry {
  size_t doc_id, count = 0;
  Entry(size_t in_doc_id, size_t in_count) : doc_id(in_doc_id), count(in_count) {}
  // ƒанный оператор необходим дл€ проведени€ тестовых сценариев
  bool operator ==(const Entry& other) const {
	return (doc_id == other.doc_id &&
	  count == other.count);
  }
};
class InvertedIndex {
public:
  InvertedIndex() = default;
  /**
  * ќбновить или заполнить базу документов, по которой будем совершать
  поиск
  * @param texts_input содержимое документов
  */
  void UpdateDocumentBase(std::vector<std::string> input_docs);
  /*
  *ћетод определ€ет количество вхождений слова word в загруженной базе
	документов
	* @param word слово, частоту вхождений которого необходимо определить
	* @return возвращает подготовленный список с частотой слов
	*/
  std::vector<Entry> GetWordCount(const std::string& word);
private:
  std::vector<std::string> docs; // список содержимого документов
  std::map<std::string, std::vector<Entry>> freq_dictionary; // частотны словарь

};

